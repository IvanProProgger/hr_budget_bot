from db import db
from helper.logging_config import logger
from helper.messages import INITIATOR, HEAD, FINANCE, PAYMENT
from telegram import InlineKeyboardMarkup
from telegram.ext import ContextTypes


class MessageManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –æ—Ç–¥–µ–ª–∞–º"""

    _instance = None

    def __new__(cls):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MessageManager.

        :return: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MessageManager
        """

        if cls._instance is None:
            cls._instance = super(MessageManager, cls).__new__(cls)
            cls._instance._initialize()
        return cls._instance

    def _initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä MessageManager.

        –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        """

        self._data = {}
        self.db = db
        self.messages = {
            "initiator": INITIATOR,
            "head": HEAD,
            "finance": FINANCE,
            "payment": PAYMENT,
        }

    def __getitem__(self, row_id):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∞–Ω–Ω—ã–º –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—é.

        :param row_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
        :return: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ row_id –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        """

        return self._data.get(row_id, {})

    def __getattr__(self, name: str):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã.

        :param name: –ò–º—è –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        :return: –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
        """

        if name.startswith("_"):
            raise AttributeError(f"–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É {name}")
        return self._data.get(
            name, AttributeError(f"–ù–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ {name} –≤ {self.__class__.__name__}")
        )

    def __setitem__(self, row_id: int, value: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ ID —è—á–µ–π–∫–∏.

        :param row_id: ID —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
        :param value: –°–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏
        :raises ValueError: –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
        """

        if not isinstance(value, dict):
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º.")
        self._data[row_id] = value

    def __delitem__(self, row_id: int):
        """
        –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID —è—á–µ–π–∫–∏.

        :param row_id: ID —è—á–µ–π–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :raises KeyError: –ï—Å–ª–∏ ID —è—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """

        if row_id in self._data:
            del self._data[row_id]
        else:
            raise KeyError("ID —è—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def __call__(self, row_id: int) -> dict[str, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ row_id.

        :param row_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        :return: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ row_id
        """

        return {"row_id": row_id, **self._data.get(row_id, {})}

    async def update_data(self, row_id: int, data_dict: dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –ø–æ ID.

        :param row_id: ID —è—á–µ–π–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :param data_dict: –°–ª–æ–≤–∞—Ä—å –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """

        self._data.setdefault(row_id, {}).update(data_dict)

    async def get_message(self, department, stage, **kwargs) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞ –∏ —ç—Ç–∞–ø–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.

        :param department: –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        :param stage: –≠—Ç–∞–ø –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        :param kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        :return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        :raises ValueError: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–ª–∏ —ç—Ç–∞–ø
        """

        if department not in self.messages:
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {department}")

        if stage not in self.messages[department]:
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è –¥–ª—è {department}: {stage}")

        try:
            return self.messages[department][stage].format(**kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_messages_with_tracking(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id,
        department: str,
        chat_ids: list[int | str] | int | str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º message_id –∏ user_id.

        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ Telegram
        :param row_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        :param department: –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param stage: –≠—Ç–∞–ø –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        :param reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞
        :raises ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        """

        try:
            message_text = await self.get_message(
                department, stage, **await self(row_id)
            )
        except Exception as e:
            raise ValueError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞: {department} –∏ —ç—Ç–∞–ø–∞: {stage}"
            )

        if isinstance(chat_ids, (int, str)):
            chat_ids = [chat_ids]

        message_ids = []
        actual_chat_ids = []
        for chat_id in chat_ids:
            try:
                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{message_text}",
                    reply_markup=reply_markup,
                )
                message_ids.append(message.message_id)
                actual_chat_ids.append(chat_id)
            except Exception as e:
                logger.info(
                    f"üö®–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat_id: {chat_id}. –û—à–∏–±–∫–∞: {e}"
                )
                pass

        self[row_id][f"{department}_messages"] = list(zip(actual_chat_ids, message_ids))

    async def resend_messages_with_tracking(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ Telegram
        :param row_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :param department: –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param stage: –≠—Ç–∞–ø –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        :param reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞
        :raises RuntimeError: –ï—Å–ª–∏ –ø–æ –∫–ª—é—á—É department_messages –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        """

        key = f"{department}_messages"
        if self[row_id].get(key) is None:
            raise RuntimeError(f"–û—à–∏–±–∫–∞! –ü–æ –∫–ª—é—á—É {department}_messages –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")

        try:
            message_text = await self.get_message(
                department, stage, **await self(row_id)
            )
        except Exception as e:
            raise ValueError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞: {department} –∏ —ç—Ç–∞–ø–∞: {stage}"
            )

        actual_chat_ids = []
        message_ids = []
        for chat_id, message_id in self[row_id].get(key):
            try:
                message = await context.bot.send_message(
                    chat_id=chat_id, text=f"{message_text}", reply_markup=reply_markup
                )
                message_ids.append(message.message_id)
                actual_chat_ids.append(chat_id)
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å chat_id: {chat_id}: {e}")
                pass

        self[row_id][key] = list(zip(actual_chat_ids, message_ids))

    async def add_main_data(
        self, record_dict: dict, row_id, initiator_chat_id: str | int
    ):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MessageManager.

        :param record_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—á–µ—Ç–∞
        :param row_id: ID –∑–∞–ø–∏—Å–∏
        :param initiator_chat_id: ID —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        :raises RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """

        try:
            record_data_text = await get_record_info(record_dict)
            amount = record_dict.get("amount")
            initiator_nickname = await get_nickname("initiator", initiator_chat_id)
            await message_manager.update_data(
                row_id,
                {
                    "initiator_chat_id": initiator_chat_id,
                    "initiator_nickname": initiator_nickname,
                    "record_data_text": record_data_text,
                    "amount": amount,
                },
            )
        except Exception as e:
            raise RuntimeError(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MessageManager: {e}"
            )


message_manager = MessageManager()
